from datetime import timedelta

from django.contrib.auth import get_user_model
from django.core.exceptions import ValidationError
from django.test import TestCase
from django.utils import timezone

from apps.courses.models import Course, CourseEdition, Enrollment

User = get_user_model()


class CourseModelTests(TestCase):
    def setUp(self):
        self.instructor = User.objects.create_user(
            email="instructor@example.com",
            username="instructor",
            password="pass1234",
            first_name="Ada",
            last_name="Lovelace",
        )
        self.student = User.objects.create_user(
            email="student@example.com",
            username="student",
            password="pass1234",
            first_name="Alan",
            last_name="Turing",
        )
        self.course = Course.objects.create(
            title="Python Fundamentals",
            description="Introductory Python course.",
            summary="Learn the basics of Python.",
        )
        self.edition = CourseEdition.objects.create(
            course=self.course,
            name="2025-I",
            start_date=timezone.now().date(),
            end_date=timezone.now().date(),
        )
        self.edition.instructors.add(self.instructor)
        self.enrollment = Enrollment.objects.create(
            student=self.student,
            edition=self.edition,
            instructor=self.instructor,
        )

    def test_course_slug_autogenerated(self):
        course = Course.objects.create(
            title="Advanced Python",
            description="Deep dive into Python internals.",
            summary="Advanced topics in Python.",
        )
        self.assertEqual(course.slug, "advanced-python")

    def test_course_edition_slug_autogenerated(self):
        edition = CourseEdition.objects.create(
            course=self.course,
            name="2025-II",
            start_date=timezone.now().date(),
            end_date=timezone.now().date(),
        )
        expected_slug = f"{self.course.slug}-2025-ii"
        self.assertEqual(edition.slug, expected_slug)

    def test_course_edition_date_validation(self):
        edition = CourseEdition(
            course=self.course,
            name="Invalid Dates",
            start_date=timezone.now().date(),
            end_date=timezone.now().date() - timedelta(days=1),
        )
        with self.assertRaises(ValidationError):
            edition.full_clean()

    def test_build_archive_snapshot_contains_instructors_and_students(self):
        snapshot = self.edition.build_archive_snapshot()

        self.assertIn("course", snapshot)
        self.assertIn("edition", snapshot)
        self.assertIn("instructors", snapshot)
        self.assertIn("students", snapshot)

        self.assertEqual(len(snapshot["instructors"]), 1)
        self.assertEqual(snapshot["instructors"][0]["id"], self.instructor.id)

        self.assertEqual(len(snapshot["students"]), 1)
        student_entry = snapshot["students"][0]
        self.assertEqual(student_entry["id"], self.student.id)
        self.assertEqual(student_entry["instructor_id"], self.instructor.id)

    def test_archive_sets_flags_and_stores_snapshot(self):
        self.assertFalse(self.edition.is_archived)
        self.assertTrue(self.edition.is_active)

        self.edition.archive(by_user=self.instructor, notes="Semester completed.")
        self.edition.refresh_from_db()

        self.assertTrue(self.edition.is_archived)
        self.assertFalse(self.edition.is_active)
        self.assertIsNotNone(self.edition.archived_at)
        self.assertEqual(self.edition.archived_by, self.instructor)
        self.assertEqual(self.edition.archive_notes, "Semester completed.")
        self.assertIn("students", self.edition.archive_snapshot)
