# Generated by Django 5.2.7 on 2025-10-14 19:45

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models
from django.utils.text import slugify


def create_editions_and_move_enrollments(apps, schema_editor):
    Course = apps.get_model("courses", "Course")
    CourseEdition = apps.get_model("courses", "CourseEdition")
    Enrollment = apps.get_model("courses", "Enrollment")

    course_to_edition = {}

    for course in Course.objects.all():
        slug = course.slug or slugify(course.title)
        edition = CourseEdition.objects.create(
            course=course,
            name="Default",
            slug=slug,
            start_date=getattr(course, "start_date", None),
            end_date=getattr(course, "end_date", None),
            enrollment_limit=getattr(course, "enrollment_limit", None),
            is_active=course.is_active,
        )
        # Copy instructors if the m2m table still exists
        if hasattr(course, "instructors"):
            edition.instructors.set(course.instructors.all())
        course_to_edition[course.id] = edition

    for enrollment in Enrollment.objects.all():
        course_id = getattr(enrollment, "course_id", None)
        if course_id is None:
            continue
        edition = course_to_edition.get(course_id)
        if edition is None:
            continue
        enrollment.edition_id = edition.id
        enrollment.save(update_fields=["edition"])


def noop(apps, schema_editor):
    """Backwards noop placeholder."""
    return None


class Migration(migrations.Migration):

    dependencies = [
        ("courses", "0002_remove_course_instructor_course_instructors_and_more"),
    ]

    operations = [
        migrations.RemoveConstraint(
            model_name="enrollment",
            name="uniq_student_course_enrollment",
        ),
        migrations.CreateModel(
            name="CourseEdition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Display name for the edition (e.g., '2025-I', 'Spring 2025').",
                        max_length=120,
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Unique identifier for the edition.",
                        max_length=180,
                    ),
                ),
                ("start_date", models.DateField(blank=True, null=True)),
                ("end_date", models.DateField(blank=True, null=True)),
                (
                    "enrollment_limit",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Maximum number of students allowed. Leave empty for no limit.",
                        null=True,
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="If disabled, students cannot enroll or progress.",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Archived editions are read-only and historical.",
                    ),
                ),
                ("archived_at", models.DateTimeField(blank=True, null=True)),
                (
                    "archive_snapshot",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stored data about participants and progress at archive time.",
                    ),
                ),
                (
                    "archive_notes",
                    models.TextField(
                        blank=True,
                        help_text="Optional notes about the archive (e.g., reasons, summary).",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "archived_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="archived_editions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="editions",
                        to="courses.course",
                    ),
                ),
                (
                    "instructors",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Teachers who can impart this course edition.",
                        related_name="course_editions_taught",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "course_editions",
                "ordering": ["-start_date", "-created_at"],
                "verbose_name": "Course Edition",
                "verbose_name_plural": "Course Editions",
                "unique_together": {("course", "slug")},
            },
        ),
        migrations.AddField(
            model_name="enrollment",
            name="edition",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollments",
                to="courses.courseedition",
            ),
        ),
        migrations.RunPython(create_editions_and_move_enrollments, noop),
        migrations.RemoveField(
            model_name="enrollment",
            name="course",
        ),
        migrations.AlterField(
            model_name="enrollment",
            name="edition",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="enrollments",
                to="courses.courseedition",
            ),
        ),
        migrations.AddConstraint(
            model_name="enrollment",
            constraint=models.UniqueConstraint(
                fields=("student", "edition"),
                name="uniq_student_edition_enrollment",
            ),
        ),
        migrations.RemoveField(
            model_name="course",
            name="enrollment_limit",
        ),
        migrations.RemoveField(
            model_name="course",
            name="end_date",
        ),
        migrations.RemoveField(
            model_name="course",
            name="instructors",
        ),
        migrations.RemoveField(
            model_name="course",
            name="start_date",
        ),
    ]
