name: CI Full Stack

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  lint-backend:
    name: Lint Backend (NestJS)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint "{src,apps,libs,test}/**/*.ts" --max-warnings=0

      - name: Check code formatting with Prettier
        run: npx prettier --check "src/**/*.ts" "test/**/*.ts"

      - name: Type check
        run: npm run build

  lint-frontend:
    name: Lint Frontend (React)
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Type check
        run: npm run type-check:ci

  test-backend:
    name: Test Backend (NestJS)
    runs-on: ubuntu-latest
    needs: lint-backend
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edupropyth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run unit tests with coverage
        run: npm run test:cov
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: edupropyth_test
          JWT_SECRET: test-secret-key-for-ci
          JWT_EXPIRATION: 7d
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          JWT_REFRESH_EXPIRATION: 30d

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
          DB_DATABASE: edupropyth_test
          JWT_SECRET: test-secret-key-for-ci
          JWT_EXPIRATION: 7d
          JWT_REFRESH_SECRET: test-refresh-secret-for-ci
          JWT_REFRESH_EXPIRATION: 30d

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  test-frontend:
    name: Test Frontend (React)
    runs-on: ubuntu-latest
    needs: lint-frontend
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build frontend (test compilation)
        run: npm run build:ci

      - name: Run frontend tests with coverage
        run: npm run test:coverage:ci

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install backend dependencies
        run: |
          cd backend
          npm ci

      - name: Run npm audit for backend
        run: |
          cd backend
          npm audit --audit-level moderate || echo "npm audit completed with warnings"

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Run npm audit for frontend
        run: |
          cd frontend
          npm audit --audit-level moderate || echo "npm audit completed with warnings"

      - name: Run Snyk security scan (if configured)
        uses: snyk/actions/node@master
        continue-on-error: true
        if: ${{ secrets.SNYK_TOKEN != '' }}
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --severity-threshold=high

  docker-build-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: edupropyth-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

      - name: Test frontend Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: edupropyth-frontend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  all-checks-passed:
    name: All Checks Passed
    runs-on: ubuntu-latest
    needs:
      [lint-backend, lint-frontend, test-backend, test-frontend, security-scan]
    if: always()
    steps:
      - name: Check if all jobs succeeded
        run: |
          if [ "${{ needs.lint-backend.result }}" != "success" ] || \
             [ "${{ needs.lint-frontend.result }}" != "success" ] || \
             [ "${{ needs.test-backend.result }}" != "success" ] || \
             [ "${{ needs.test-frontend.result }}" != "success" ]; then
            echo "Some checks failed"
            exit 1
          fi
          echo "All checks passed successfully!"
