name: CI Full Stack

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  NODE_VERSION: "20"

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: |
            package-lock.json
            frontend/package-lock.json

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements/dev.txt

      - name: Install Node.js dependencies (root)
        run: npm ci

      - name: Install Node.js dependencies (frontend)
        run: cd frontend && npm ci

      - name: Lint backend with flake8
        run: |
          cd backend
          flake8 .

      - name: Check backend code formatting with black
        run: |
          cd backend
          black --check .

      - name: Check backend import sorting with isort
        run: |
          cd backend
          isort --check-only .

      - name: Lint frontend with ESLint
        run: |
          cd frontend
          npm run lint

      - name: Type check frontend
        run: |
          cd frontend
          npm run type-check

  commitlint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install commitlint dependencies
        run: npm install @commitlint/cli @commitlint/config-conventional

      - name: Validate commit messages
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

  backend-test:
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./backend

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: edupropyth_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements/dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Django migrations
        run: python manage.py migrate
        env:
          DEBUG: True
          SECRET_KEY: test-secret-key-for-ci
          DB_NAME: edupropyth_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          GOOGLE_CLIENT_ID: fake-google-client-id-for-ci
          GOOGLE_CLIENT_SECRET: fake-google-secret-for-ci
          GITHUB_CLIENT_ID: fake-github-client-id-for-ci
          GITHUB_CLIENT_SECRET: fake-github-secret-for-ci
          MICROSOFT_CLIENT_ID: fake-microsoft-client-id-for-ci
          MICROSOFT_CLIENT_SECRET: fake-microsoft-secret-for-ci

      - name: Run backend tests with coverage
        run: pytest --cov=src --cov=apps --cov-report=xml --cov-report=term-missing
        env:
          DEBUG: True
          SECRET_KEY: test-secret-key-for-ci
          DB_NAME: edupropyth_test
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: localhost
          DB_PORT: 5432
          GOOGLE_CLIENT_ID: fake-google-client-id-for-ci
          GOOGLE_CLIENT_SECRET: fake-google-secret-for-ci
          GITHUB_CLIENT_ID: fake-github-client-id-for-ci
          GITHUB_CLIENT_SECRET: fake-github-secret-for-ci
          MICROSOFT_CLIENT_ID: fake-microsoft-client-id-for-ci
          MICROSOFT_CLIENT_SECRET: fake-microsoft-secret-for-ci

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  frontend-test:
    runs-on: ubuntu-latest
    needs: lint
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ./frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run frontend tests with coverage
        run: npm run test:coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security scanning tools
        run: |
          pip install safety bandit

      - name: Run safety check for Python dependencies
        run: |
          cd backend
          safety check -r requirements/base.txt

      - name: Run bandit security scan
        run: |
          cd backend
          bandit -r apps/ config/ -f json -o bandit-report.json || true

      - name: Set up Node.js for frontend security scan
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run npm audit for frontend
        run: |
          cd frontend
          npm audit --audit-level moderate

  docker-build-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test backend Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: false
          tags: test-backend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test frontend Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: false
          tags: test-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
